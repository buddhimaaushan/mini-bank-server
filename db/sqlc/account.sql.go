// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: account.sql

package sqlc

import (
	"context"
)

const CreateAccount = `-- name: CreateAccount :one

INSERT INTO
    accounts(type, balance, acc_status)
VALUES ($1, $2, $3) RETURNING id, type, balance, acc_status, created_at
`

type CreateAccountParams struct {
	Type      string `db:"type" json:"type"`
	Balance   int64  `db:"balance" json:"balance"`
	AccStatus Status `db:"acc_status" json:"acc_status"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, CreateAccount, arg.Type, arg.Balance, arg.AccStatus)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Balance,
		&i.AccStatus,
		&i.CreatedAt,
	)
	return i, err
}

const DeleteAccount = `-- name: DeleteAccount :exec

DELETE FROM accounts WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, DeleteAccount, id)
	return err
}

const GetAccount = `-- name: GetAccount :one

SELECT id, type, balance, acc_status, created_at FROM accounts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, GetAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Balance,
		&i.AccStatus,
		&i.CreatedAt,
	)
	return i, err
}

const GetAccountForUpdate = `-- name: GetAccountForUpdate :one

SELECT id, type, balance, acc_status, created_at FROM accounts WHERE id = $1 LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, GetAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Balance,
		&i.AccStatus,
		&i.CreatedAt,
	)
	return i, err
}

const GetAccounts = `-- name: GetAccounts :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
LIMIT $2
OFFSET $1
`

type GetAccountsParams struct {
	OffsetNo int32 `db:"offset_no" json:"offset_no"`
	LimitNo  int32 `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccounts(ctx context.Context, arg GetAccountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccounts, arg.OffsetNo, arg.LimitNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceBetweenAsc = `-- name: GetAccountsBalanceBetweenAsc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE (
        acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
        OR acc_status = $6
    )
    AND balance BETWEEN $1 AND $2
ORDER BY created_at ASC
LIMIT $8
OFFSET $7
`

type GetAccountsBalanceBetweenAscParams struct {
	Balance   int64  `db:"balance" json:"balance"`
	Balance_2 int64  `db:"balance_2" json:"balance_2"`
	Active    Status `db:"active" json:"active"`
	Inactive  Status `db:"inactive" json:"inactive"`
	Holded    Status `db:"holded" json:"holded"`
	Deleted   Status `db:"deleted" json:"deleted"`
	OffsetNo  int32  `db:"offset_no" json:"offset_no"`
	LimitNo   int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceBetweenAsc(ctx context.Context, arg GetAccountsBalanceBetweenAscParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceBetweenAsc,
		arg.Balance,
		arg.Balance_2,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceBetweenDesc = `-- name: GetAccountsBalanceBetweenDesc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE (
        acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
        OR acc_status = $6
    )
    AND balance BETWEEN $1 AND $2
ORDER BY created_at DESC
LIMIT $8
OFFSET $7
`

type GetAccountsBalanceBetweenDescParams struct {
	Balance   int64  `db:"balance" json:"balance"`
	Balance_2 int64  `db:"balance_2" json:"balance_2"`
	Active    Status `db:"active" json:"active"`
	Inactive  Status `db:"inactive" json:"inactive"`
	Holded    Status `db:"holded" json:"holded"`
	Deleted   Status `db:"deleted" json:"deleted"`
	OffsetNo  int32  `db:"offset_no" json:"offset_no"`
	LimitNo   int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceBetweenDesc(ctx context.Context, arg GetAccountsBalanceBetweenDescParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceBetweenDesc,
		arg.Balance,
		arg.Balance_2,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceEQAsc = `-- name: GetAccountsBalanceEQAsc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance = $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at ASC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceEQAscParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceEQAsc(ctx context.Context, arg GetAccountsBalanceEQAscParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceEQAsc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceEQDesc = `-- name: GetAccountsBalanceEQDesc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance = $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at DESC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceEQDescParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceEQDesc(ctx context.Context, arg GetAccountsBalanceEQDescParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceEQDesc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceGTAsc = `-- name: GetAccountsBalanceGTAsc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance > $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at ASC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceGTAscParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceGTAsc(ctx context.Context, arg GetAccountsBalanceGTAscParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceGTAsc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceGTDesc = `-- name: GetAccountsBalanceGTDesc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance > $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at DESC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceGTDescParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceGTDesc(ctx context.Context, arg GetAccountsBalanceGTDescParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceGTDesc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceGTEQAsc = `-- name: GetAccountsBalanceGTEQAsc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance >= $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at ASC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceGTEQAscParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceGTEQAsc(ctx context.Context, arg GetAccountsBalanceGTEQAscParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceGTEQAsc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceGTEQDesc = `-- name: GetAccountsBalanceGTEQDesc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance >= $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at DESC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceGTEQDescParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceGTEQDesc(ctx context.Context, arg GetAccountsBalanceGTEQDescParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceGTEQDesc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceLTAsc = `-- name: GetAccountsBalanceLTAsc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance < $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at ASC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceLTAscParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceLTAsc(ctx context.Context, arg GetAccountsBalanceLTAscParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceLTAsc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceLTDesc = `-- name: GetAccountsBalanceLTDesc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance < $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at DESC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceLTDescParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceLTDesc(ctx context.Context, arg GetAccountsBalanceLTDescParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceLTDesc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceLTEQAsc = `-- name: GetAccountsBalanceLTEQAsc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance <= $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at ASC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceLTEQAscParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceLTEQAsc(ctx context.Context, arg GetAccountsBalanceLTEQAscParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceLTEQAsc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceLTEQDesc = `-- name: GetAccountsBalanceLTEQDesc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance <= $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at DESC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceLTEQDescParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceLTEQDesc(ctx context.Context, arg GetAccountsBalanceLTEQDescParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceLTEQDesc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceNOTEQAsc = `-- name: GetAccountsBalanceNOTEQAsc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance <> $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at ASC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceNOTEQAscParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceNOTEQAsc(ctx context.Context, arg GetAccountsBalanceNOTEQAscParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceNOTEQAsc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsBalanceNOTEQDesc = `-- name: GetAccountsBalanceNOTEQDesc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    balance <> $1
    AND (
        acc_status = $2
        OR acc_status = $3
        OR acc_status = $4
        OR acc_status = $5
    )
ORDER BY created_at DESC
LIMIT $7
OFFSET $6
`

type GetAccountsBalanceNOTEQDescParams struct {
	Balance  int64  `db:"balance" json:"balance"`
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsBalanceNOTEQDesc(ctx context.Context, arg GetAccountsBalanceNOTEQDescParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsBalanceNOTEQDesc,
		arg.Balance,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsByAccStatusAsc = `-- name: GetAccountsByAccStatusAsc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    acc_status = $1
    OR acc_status = $2
    OR acc_status = $3
    OR acc_status = $4
ORDER BY created_at ASC
LIMIT $6
OFFSET $5
`

type GetAccountsByAccStatusAscParams struct {
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsByAccStatusAsc(ctx context.Context, arg GetAccountsByAccStatusAscParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsByAccStatusAsc,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAccountsByAccStatusDesc = `-- name: GetAccountsByAccStatusDesc :many

SELECT id, type, balance, acc_status, created_at
FROM accounts
WHERE
    acc_status = $1
    OR acc_status = $2
    OR acc_status = $3
    OR acc_status = $4
ORDER BY created_at DESC
LIMIT $6
OFFSET $5
`

type GetAccountsByAccStatusDescParams struct {
	Active   Status `db:"active" json:"active"`
	Inactive Status `db:"inactive" json:"inactive"`
	Holded   Status `db:"holded" json:"holded"`
	Deleted  Status `db:"deleted" json:"deleted"`
	OffsetNo int32  `db:"offset_no" json:"offset_no"`
	LimitNo  int32  `db:"limit_no" json:"limit_no"`
}

func (q *Queries) GetAccountsByAccStatusDesc(ctx context.Context, arg GetAccountsByAccStatusDescParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, GetAccountsByAccStatusDesc,
		arg.Active,
		arg.Inactive,
		arg.Holded,
		arg.Deleted,
		arg.OffsetNo,
		arg.LimitNo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Balance,
			&i.AccStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SetAccountBalance = `-- name: SetAccountBalance :one

UPDATE accounts SET balance = $2 WHERE id = $1 RETURNING id, type, balance, acc_status, created_at
`

type SetAccountBalanceParams struct {
	ID      int64 `db:"id" json:"id"`
	Balance int64 `db:"balance" json:"balance"`
}

func (q *Queries) SetAccountBalance(ctx context.Context, arg SetAccountBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, SetAccountBalance, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Balance,
		&i.AccStatus,
		&i.CreatedAt,
	)
	return i, err
}

const UpdateAccountAccStatus = `-- name: UpdateAccountAccStatus :one

UPDATE accounts SET acc_status = $2 WHERE id = $1 RETURNING id, type, balance, acc_status, created_at
`

type UpdateAccountAccStatusParams struct {
	ID        int64  `db:"id" json:"id"`
	AccStatus Status `db:"acc_status" json:"acc_status"`
}

func (q *Queries) UpdateAccountAccStatus(ctx context.Context, arg UpdateAccountAccStatusParams) (Account, error) {
	row := q.db.QueryRow(ctx, UpdateAccountAccStatus, arg.ID, arg.AccStatus)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Balance,
		&i.AccStatus,
		&i.CreatedAt,
	)
	return i, err
}

const UpdateAccountBalance = `-- name: UpdateAccountBalance :one

UPDATE accounts
SET
    balance = balance + $1
WHERE
    id = $2 RETURNING id, type, balance, acc_status, created_at
`

type UpdateAccountBalanceParams struct {
	Amount int64 `db:"amount" json:"amount"`
	ID     int64 `db:"id" json:"id"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, UpdateAccountBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Balance,
		&i.AccStatus,
		&i.CreatedAt,
	)
	return i, err
}

const UpdateAccountType = `-- name: UpdateAccountType :one

UPDATE accounts SET type = $2 WHERE id = $1 RETURNING id, type, balance, acc_status, created_at
`

type UpdateAccountTypeParams struct {
	ID   int64  `db:"id" json:"id"`
	Type string `db:"type" json:"type"`
}

func (q *Queries) UpdateAccountType(ctx context.Context, arg UpdateAccountTypeParams) (Account, error) {
	row := q.db.QueryRow(ctx, UpdateAccountType, arg.ID, arg.Type)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Balance,
		&i.AccStatus,
		&i.CreatedAt,
	)
	return i, err
}
