// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: entry.sql

package sqlc

import (
	"context"
)

const CreateEntry = `-- name: CreateEntry :one

INSERT INTO
    entries (account_id, amount)
VALUES ($1, $2) RETURNING id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64 `db:"account_id" json:"account_id"`
	Amount    int64 `db:"amount" json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRow(ctx, CreateEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const DeleteEntry = `-- name: DeleteEntry :exec

DELETE FROM entries WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, DeleteEntry, id)
	return err
}

const GetEntriesAsc = `-- name: GetEntriesAsc :many

SELECT id, account_id, amount, created_at
FROM entries
WHERE account_id = $1
ORDER BY
    created_at ASC,
    account_id ASC
LIMIT $2
OFFSET $3
`

type GetEntriesAscParams struct {
	AccountID int64 `db:"account_id" json:"account_id"`
	Limit     int32 `db:"limit" json:"limit"`
	Offset    int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetEntriesAsc(ctx context.Context, arg GetEntriesAscParams) ([]Entry, error) {
	rows, err := q.db.Query(ctx, GetEntriesAsc, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEntriesDesc = `-- name: GetEntriesDesc :many

SELECT id, account_id, amount, created_at
FROM entries
WHERE account_id = $1
ORDER BY
    created_at DESC,
    account_id DESC
LIMIT $2
OFFSET $3
`

type GetEntriesDescParams struct {
	AccountID int64 `db:"account_id" json:"account_id"`
	Limit     int32 `db:"limit" json:"limit"`
	Offset    int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetEntriesDesc(ctx context.Context, arg GetEntriesDescParams) ([]Entry, error) {
	rows, err := q.db.Query(ctx, GetEntriesDesc, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEntry = `-- name: GetEntry :one

SELECT id, account_id, amount, created_at FROM entries WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRow(ctx, GetEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
