// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: verify_phone.sql

package sqlc

import (
	"context"
)

const CreateVerifyPhone = `-- name: CreateVerifyPhone :one

INSERT INTO
    verify_phones (username, phone, secret_code)
VALUES ($1, $2, $3) RETURNING id, username, phone, secret_code, is_used, created_at, expired_at
`

type CreateVerifyPhoneParams struct {
	Username   string `db:"username" json:"username"`
	Phone      string `db:"phone" json:"phone"`
	SecretCode string `db:"secret_code" json:"secret_code"`
}

func (q *Queries) CreateVerifyPhone(ctx context.Context, arg CreateVerifyPhoneParams) (VerifyPhone, error) {
	row := q.db.QueryRow(ctx, CreateVerifyPhone, arg.Username, arg.Phone, arg.SecretCode)
	var i VerifyPhone
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Phone,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const UpdateVerifyPhone = `-- name: UpdateVerifyPhone :one

UPDATE verify_phones
SET is_used = TRUE
WHERE
    id = $1
    AND secret_code = $2
    AND is_used = FALSE
    AND expired_at > now() RETURNING id, username, phone, secret_code, is_used, created_at, expired_at
`

type UpdateVerifyPhoneParams struct {
	ID         int64  `db:"id" json:"id"`
	SecretCode string `db:"secret_code" json:"secret_code"`
}

func (q *Queries) UpdateVerifyPhone(ctx context.Context, arg UpdateVerifyPhoneParams) (VerifyPhone, error) {
	row := q.db.QueryRow(ctx, UpdateVerifyPhone, arg.ID, arg.SecretCode)
	var i VerifyPhone
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Phone,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
