// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: transfer.sql

package sqlc

import (
	"context"
)

const CreateTransfer = `-- name: CreateTransfer :one

INSERT INTO
    transfers (
        from_account_id,
        to_account_id,
        transfered_by_id,
        amount
    )
VALUES ($1, $2, $3, $4)
RETURNING id, from_account_id, to_account_id, transfered_by_id, amount, created_at
`

type CreateTransferParams struct {
	FromAccountID  int64 `db:"from_account_id" json:"from_account_id"`
	ToAccountID    int64 `db:"to_account_id" json:"to_account_id"`
	TransferedByID int64 `db:"transfered_by_id" json:"transfered_by_id"`
	Amount         int64 `db:"amount" json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, CreateTransfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.TransferedByID,
		arg.Amount,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.TransferedByID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const DeleteTransfer = `-- name: DeleteTransfer :exec

DELETE FROM transfers WHERE id = $1
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, DeleteTransfer, id)
	return err
}

const GetTransfer = `-- name: GetTransfer :one

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at FROM transfers WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRow(ctx, GetTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.TransferedByID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const GetTransfersAmountBetweenAsc = `-- name: GetTransfersAmountBetweenAsc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount BETWEEN $1 AND $2
ORDER BY created_at ASC
LIMIT $3
OFFSET $4
`

type GetTransfersAmountBetweenAscParams struct {
	Amount   int64 `db:"amount" json:"amount"`
	Amount_2 int64 `db:"amount_2" json:"amount_2"`
	Limit    int32 `db:"limit" json:"limit"`
	Offset   int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountBetweenAsc(ctx context.Context, arg GetTransfersAmountBetweenAscParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountBetweenAsc,
		arg.Amount,
		arg.Amount_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountBetweenDesc = `-- name: GetTransfersAmountBetweenDesc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount BETWEEN $1 AND $2
ORDER BY created_at DESC
LIMIT $3
OFFSET $4
`

type GetTransfersAmountBetweenDescParams struct {
	Amount   int64 `db:"amount" json:"amount"`
	Amount_2 int64 `db:"amount_2" json:"amount_2"`
	Limit    int32 `db:"limit" json:"limit"`
	Offset   int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountBetweenDesc(ctx context.Context, arg GetTransfersAmountBetweenDescParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountBetweenDesc,
		arg.Amount,
		arg.Amount_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountEQAsc = `-- name: GetTransfersAmountEQAsc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount = $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountEQAscParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountEQAsc(ctx context.Context, arg GetTransfersAmountEQAscParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountEQAsc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountEQDesc = `-- name: GetTransfersAmountEQDesc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountEQDescParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountEQDesc(ctx context.Context, arg GetTransfersAmountEQDescParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountEQDesc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountGTAsc = `-- name: GetTransfersAmountGTAsc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount > $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountGTAscParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountGTAsc(ctx context.Context, arg GetTransfersAmountGTAscParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountGTAsc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountGTDesc = `-- name: GetTransfersAmountGTDesc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount > $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountGTDescParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountGTDesc(ctx context.Context, arg GetTransfersAmountGTDescParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountGTDesc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountGTEQAsc = `-- name: GetTransfersAmountGTEQAsc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount >= $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountGTEQAscParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountGTEQAsc(ctx context.Context, arg GetTransfersAmountGTEQAscParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountGTEQAsc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountGTEQDesc = `-- name: GetTransfersAmountGTEQDesc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount >= $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountGTEQDescParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountGTEQDesc(ctx context.Context, arg GetTransfersAmountGTEQDescParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountGTEQDesc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountLTAsc = `-- name: GetTransfersAmountLTAsc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount < $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountLTAscParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountLTAsc(ctx context.Context, arg GetTransfersAmountLTAscParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountLTAsc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountLTDesc = `-- name: GetTransfersAmountLTDesc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount < $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountLTDescParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountLTDesc(ctx context.Context, arg GetTransfersAmountLTDescParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountLTDesc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountLTEQAsc = `-- name: GetTransfersAmountLTEQAsc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount <= $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountLTEQAscParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountLTEQAsc(ctx context.Context, arg GetTransfersAmountLTEQAscParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountLTEQAsc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountLTEQDesc = `-- name: GetTransfersAmountLTEQDesc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount <= $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountLTEQDescParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountLTEQDesc(ctx context.Context, arg GetTransfersAmountLTEQDescParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountLTEQDesc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountNOTEQAsc = `-- name: GetTransfersAmountNOTEQAsc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount <> $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountNOTEQAscParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountNOTEQAsc(ctx context.Context, arg GetTransfersAmountNOTEQAscParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountNOTEQAsc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAmountNOTEQDesc = `-- name: GetTransfersAmountNOTEQDesc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE amount <> $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetTransfersAmountNOTEQDescParams struct {
	Amount int64 `db:"amount" json:"amount"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAmountNOTEQDesc(ctx context.Context, arg GetTransfersAmountNOTEQDescParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAmountNOTEQDesc, arg.Amount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersAsc = `-- name: GetTransfersAsc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE
    from_account_id = $1
    AND to_account_id = $2
ORDER BY created_at ASC
LIMIT $3
OFFSET $4
`

type GetTransfersAscParams struct {
	FromAccountID int64 `db:"from_account_id" json:"from_account_id"`
	ToAccountID   int64 `db:"to_account_id" json:"to_account_id"`
	Limit         int32 `db:"limit" json:"limit"`
	Offset        int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersAsc(ctx context.Context, arg GetTransfersAscParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersAsc,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersDesc = `-- name: GetTransfersDesc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE
    from_account_id = $1
    AND to_account_id = $2
ORDER BY created_at Desc
LIMIT $3
OFFSET $4
`

type GetTransfersDescParams struct {
	FromAccountID int64 `db:"from_account_id" json:"from_account_id"`
	ToAccountID   int64 `db:"to_account_id" json:"to_account_id"`
	Limit         int32 `db:"limit" json:"limit"`
	Offset        int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersDesc(ctx context.Context, arg GetTransfersDescParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersDesc,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersFromAsc = `-- name: GetTransfersFromAsc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE from_account_id = $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type GetTransfersFromAscParams struct {
	FromAccountID int64 `db:"from_account_id" json:"from_account_id"`
	Limit         int32 `db:"limit" json:"limit"`
	Offset        int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersFromAsc(ctx context.Context, arg GetTransfersFromAscParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersFromAsc, arg.FromAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersFromDesc = `-- name: GetTransfersFromDesc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE from_account_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetTransfersFromDescParams struct {
	FromAccountID int64 `db:"from_account_id" json:"from_account_id"`
	Limit         int32 `db:"limit" json:"limit"`
	Offset        int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersFromDesc(ctx context.Context, arg GetTransfersFromDescParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersFromDesc, arg.FromAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersToAsc = `-- name: GetTransfersToAsc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE to_account_id = $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type GetTransfersToAscParams struct {
	ToAccountID int64 `db:"to_account_id" json:"to_account_id"`
	Limit       int32 `db:"limit" json:"limit"`
	Offset      int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersToAsc(ctx context.Context, arg GetTransfersToAscParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersToAsc, arg.ToAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransfersToDesc = `-- name: GetTransfersToDesc :many

SELECT id, from_account_id, to_account_id, transfered_by_id, amount, created_at
FROM transfers
WHERE to_account_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetTransfersToDescParams struct {
	ToAccountID int64 `db:"to_account_id" json:"to_account_id"`
	Limit       int32 `db:"limit" json:"limit"`
	Offset      int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTransfersToDesc(ctx context.Context, arg GetTransfersToDescParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, GetTransfersToDesc, arg.ToAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.TransferedByID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
