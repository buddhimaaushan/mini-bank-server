// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buddhimaaushan/mini_bank/db (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/buddhimaaushan/mini_bank/db"
	sqlc "github.com/buddhimaaushan/mini_bank/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AccountTx mocks base method.
func (m *MockStore) AccountTx(arg0 context.Context, arg1 db.AccountTxParams) (db.AccountTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountTx", arg0, arg1)
	ret0, _ := ret[0].(db.AccountTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountTx indicates an expected call of AccountTx.
func (mr *MockStoreMockRecorder) AccountTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountTx", reflect.TypeOf((*MockStore)(nil).AccountTx), arg0, arg1)
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 sqlc.CreateAccountParams) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)
}

// CreateAccountHolder mocks base method.
func (m *MockStore) CreateAccountHolder(arg0 context.Context, arg1 sqlc.CreateAccountHolderParams) (sqlc.AccountHolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountHolder", arg0, arg1)
	ret0, _ := ret[0].(sqlc.AccountHolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountHolder indicates an expected call of CreateAccountHolder.
func (mr *MockStoreMockRecorder) CreateAccountHolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountHolder", reflect.TypeOf((*MockStore)(nil).CreateAccountHolder), arg0, arg1)
}

// CreateAccountHolders mocks base method.
func (m *MockStore) CreateAccountHolders(arg0 context.Context, arg1 []sqlc.CreateAccountHoldersParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountHolders", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountHolders indicates an expected call of CreateAccountHolders.
func (mr *MockStoreMockRecorder) CreateAccountHolders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountHolders", reflect.TypeOf((*MockStore)(nil).CreateAccountHolders), arg0, arg1)
}

// CreateEntry mocks base method.
func (m *MockStore) CreateEntry(arg0 context.Context, arg1 sqlc.CreateEntryParams) (sqlc.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockStoreMockRecorder) CreateEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockStore)(nil).CreateEntry), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 sqlc.CreateSessionParams) (sqlc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateTransfer mocks base method.
func (m *MockStore) CreateTransfer(arg0 context.Context, arg1 sqlc.CreateTransferParams) (sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockStoreMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStore)(nil).CreateTransfer), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 sqlc.CreateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore) CreateVerifyEmail(arg0 context.Context, arg1 sqlc.CreateVerifyEmailParams) (sqlc.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(sqlc.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStoreMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmail), arg0, arg1)
}

// CreateVerifyPhone mocks base method.
func (m *MockStore) CreateVerifyPhone(arg0 context.Context, arg1 sqlc.CreateVerifyPhoneParams) (sqlc.VerifyPhone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyPhone", arg0, arg1)
	ret0, _ := ret[0].(sqlc.VerifyPhone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyPhone indicates an expected call of CreateVerifyPhone.
func (mr *MockStoreMockRecorder) CreateVerifyPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyPhone", reflect.TypeOf((*MockStore)(nil).CreateVerifyPhone), arg0, arg1)
}

// DeleteAccount mocks base method.
func (m *MockStore) DeleteAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockStoreMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockStore)(nil).DeleteAccount), arg0, arg1)
}

// DeleteAccountHolder mocks base method.
func (m *MockStore) DeleteAccountHolder(arg0 context.Context, arg1 sqlc.DeleteAccountHolderParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountHolder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountHolder indicates an expected call of DeleteAccountHolder.
func (mr *MockStoreMockRecorder) DeleteAccountHolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountHolder", reflect.TypeOf((*MockStore)(nil).DeleteAccountHolder), arg0, arg1)
}

// DeleteEntry mocks base method.
func (m *MockStore) DeleteEntry(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntry indicates an expected call of DeleteEntry.
func (mr *MockStoreMockRecorder) DeleteEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockStore)(nil).DeleteEntry), arg0, arg1)
}

// DeleteTransfer mocks base method.
func (m *MockStore) DeleteTransfer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransfer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransfer indicates an expected call of DeleteTransfer.
func (mr *MockStoreMockRecorder) DeleteTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransfer", reflect.TypeOf((*MockStore)(nil).DeleteTransfer), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockStore) GetAccount(arg0 context.Context, arg1 int64) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStoreMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStore)(nil).GetAccount), arg0, arg1)
}

// GetAccountForUpdate mocks base method.
func (m *MockStore) GetAccountForUpdate(arg0 context.Context, arg1 int64) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountForUpdate", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountForUpdate indicates an expected call of GetAccountForUpdate.
func (mr *MockStoreMockRecorder) GetAccountForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountForUpdate", reflect.TypeOf((*MockStore)(nil).GetAccountForUpdate), arg0, arg1)
}

// GetAccountHolder mocks base method.
func (m *MockStore) GetAccountHolder(arg0 context.Context, arg1 sqlc.GetAccountHolderParams) (sqlc.AccountHolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountHolder", arg0, arg1)
	ret0, _ := ret[0].(sqlc.AccountHolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountHolder indicates an expected call of GetAccountHolder.
func (mr *MockStoreMockRecorder) GetAccountHolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountHolder", reflect.TypeOf((*MockStore)(nil).GetAccountHolder), arg0, arg1)
}

// GetAccountHoldersByAccountID mocks base method.
func (m *MockStore) GetAccountHoldersByAccountID(arg0 context.Context, arg1 sqlc.GetAccountHoldersByAccountIDParams) ([]sqlc.AccountHolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountHoldersByAccountID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.AccountHolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountHoldersByAccountID indicates an expected call of GetAccountHoldersByAccountID.
func (mr *MockStoreMockRecorder) GetAccountHoldersByAccountID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountHoldersByAccountID", reflect.TypeOf((*MockStore)(nil).GetAccountHoldersByAccountID), arg0, arg1)
}

// GetAccountHoldersByUserID mocks base method.
func (m *MockStore) GetAccountHoldersByUserID(arg0 context.Context, arg1 sqlc.GetAccountHoldersByUserIDParams) ([]sqlc.AccountHolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountHoldersByUserID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.AccountHolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountHoldersByUserID indicates an expected call of GetAccountHoldersByUserID.
func (mr *MockStoreMockRecorder) GetAccountHoldersByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountHoldersByUserID", reflect.TypeOf((*MockStore)(nil).GetAccountHoldersByUserID), arg0, arg1)
}

// GetAccounts mocks base method.
func (m *MockStore) GetAccounts(arg0 context.Context, arg1 sqlc.GetAccountsParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockStoreMockRecorder) GetAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockStore)(nil).GetAccounts), arg0, arg1)
}

// GetAccountsBalanceBetweenAsc mocks base method.
func (m *MockStore) GetAccountsBalanceBetweenAsc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceBetweenAscParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceBetweenAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceBetweenAsc indicates an expected call of GetAccountsBalanceBetweenAsc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceBetweenAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceBetweenAsc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceBetweenAsc), arg0, arg1)
}

// GetAccountsBalanceBetweenDesc mocks base method.
func (m *MockStore) GetAccountsBalanceBetweenDesc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceBetweenDescParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceBetweenDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceBetweenDesc indicates an expected call of GetAccountsBalanceBetweenDesc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceBetweenDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceBetweenDesc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceBetweenDesc), arg0, arg1)
}

// GetAccountsBalanceEQAsc mocks base method.
func (m *MockStore) GetAccountsBalanceEQAsc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceEQAscParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceEQAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceEQAsc indicates an expected call of GetAccountsBalanceEQAsc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceEQAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceEQAsc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceEQAsc), arg0, arg1)
}

// GetAccountsBalanceEQDesc mocks base method.
func (m *MockStore) GetAccountsBalanceEQDesc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceEQDescParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceEQDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceEQDesc indicates an expected call of GetAccountsBalanceEQDesc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceEQDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceEQDesc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceEQDesc), arg0, arg1)
}

// GetAccountsBalanceGTAsc mocks base method.
func (m *MockStore) GetAccountsBalanceGTAsc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceGTAscParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceGTAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceGTAsc indicates an expected call of GetAccountsBalanceGTAsc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceGTAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceGTAsc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceGTAsc), arg0, arg1)
}

// GetAccountsBalanceGTDesc mocks base method.
func (m *MockStore) GetAccountsBalanceGTDesc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceGTDescParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceGTDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceGTDesc indicates an expected call of GetAccountsBalanceGTDesc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceGTDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceGTDesc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceGTDesc), arg0, arg1)
}

// GetAccountsBalanceGTEQAsc mocks base method.
func (m *MockStore) GetAccountsBalanceGTEQAsc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceGTEQAscParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceGTEQAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceGTEQAsc indicates an expected call of GetAccountsBalanceGTEQAsc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceGTEQAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceGTEQAsc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceGTEQAsc), arg0, arg1)
}

// GetAccountsBalanceGTEQDesc mocks base method.
func (m *MockStore) GetAccountsBalanceGTEQDesc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceGTEQDescParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceGTEQDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceGTEQDesc indicates an expected call of GetAccountsBalanceGTEQDesc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceGTEQDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceGTEQDesc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceGTEQDesc), arg0, arg1)
}

// GetAccountsBalanceLTAsc mocks base method.
func (m *MockStore) GetAccountsBalanceLTAsc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceLTAscParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceLTAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceLTAsc indicates an expected call of GetAccountsBalanceLTAsc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceLTAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceLTAsc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceLTAsc), arg0, arg1)
}

// GetAccountsBalanceLTDesc mocks base method.
func (m *MockStore) GetAccountsBalanceLTDesc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceLTDescParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceLTDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceLTDesc indicates an expected call of GetAccountsBalanceLTDesc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceLTDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceLTDesc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceLTDesc), arg0, arg1)
}

// GetAccountsBalanceLTEQAsc mocks base method.
func (m *MockStore) GetAccountsBalanceLTEQAsc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceLTEQAscParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceLTEQAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceLTEQAsc indicates an expected call of GetAccountsBalanceLTEQAsc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceLTEQAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceLTEQAsc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceLTEQAsc), arg0, arg1)
}

// GetAccountsBalanceLTEQDesc mocks base method.
func (m *MockStore) GetAccountsBalanceLTEQDesc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceLTEQDescParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceLTEQDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceLTEQDesc indicates an expected call of GetAccountsBalanceLTEQDesc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceLTEQDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceLTEQDesc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceLTEQDesc), arg0, arg1)
}

// GetAccountsBalanceNOTEQAsc mocks base method.
func (m *MockStore) GetAccountsBalanceNOTEQAsc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceNOTEQAscParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceNOTEQAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceNOTEQAsc indicates an expected call of GetAccountsBalanceNOTEQAsc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceNOTEQAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceNOTEQAsc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceNOTEQAsc), arg0, arg1)
}

// GetAccountsBalanceNOTEQDesc mocks base method.
func (m *MockStore) GetAccountsBalanceNOTEQDesc(arg0 context.Context, arg1 sqlc.GetAccountsBalanceNOTEQDescParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsBalanceNOTEQDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsBalanceNOTEQDesc indicates an expected call of GetAccountsBalanceNOTEQDesc.
func (mr *MockStoreMockRecorder) GetAccountsBalanceNOTEQDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsBalanceNOTEQDesc", reflect.TypeOf((*MockStore)(nil).GetAccountsBalanceNOTEQDesc), arg0, arg1)
}

// GetAccountsByAccStatusAsc mocks base method.
func (m *MockStore) GetAccountsByAccStatusAsc(arg0 context.Context, arg1 sqlc.GetAccountsByAccStatusAscParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByAccStatusAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByAccStatusAsc indicates an expected call of GetAccountsByAccStatusAsc.
func (mr *MockStoreMockRecorder) GetAccountsByAccStatusAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByAccStatusAsc", reflect.TypeOf((*MockStore)(nil).GetAccountsByAccStatusAsc), arg0, arg1)
}

// GetAccountsByAccStatusDesc mocks base method.
func (m *MockStore) GetAccountsByAccStatusDesc(arg0 context.Context, arg1 sqlc.GetAccountsByAccStatusDescParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByAccStatusDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByAccStatusDesc indicates an expected call of GetAccountsByAccStatusDesc.
func (mr *MockStoreMockRecorder) GetAccountsByAccStatusDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByAccStatusDesc", reflect.TypeOf((*MockStore)(nil).GetAccountsByAccStatusDesc), arg0, arg1)
}

// GetAllAccountHoldersAsc mocks base method.
func (m *MockStore) GetAllAccountHoldersAsc(arg0 context.Context, arg1 sqlc.GetAllAccountHoldersAscParams) ([]sqlc.AccountHolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccountHoldersAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.AccountHolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccountHoldersAsc indicates an expected call of GetAllAccountHoldersAsc.
func (mr *MockStoreMockRecorder) GetAllAccountHoldersAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccountHoldersAsc", reflect.TypeOf((*MockStore)(nil).GetAllAccountHoldersAsc), arg0, arg1)
}

// GetAllAccountHoldersDesc mocks base method.
func (m *MockStore) GetAllAccountHoldersDesc(arg0 context.Context, arg1 sqlc.GetAllAccountHoldersDescParams) ([]sqlc.AccountHolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccountHoldersDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.AccountHolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccountHoldersDesc indicates an expected call of GetAllAccountHoldersDesc.
func (mr *MockStoreMockRecorder) GetAllAccountHoldersDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccountHoldersDesc", reflect.TypeOf((*MockStore)(nil).GetAllAccountHoldersDesc), arg0, arg1)
}

// GetAllUsersAsc mocks base method.
func (m *MockStore) GetAllUsersAsc(arg0 context.Context, arg1 sqlc.GetAllUsersAscParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersAsc indicates an expected call of GetAllUsersAsc.
func (mr *MockStoreMockRecorder) GetAllUsersAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersAsc", reflect.TypeOf((*MockStore)(nil).GetAllUsersAsc), arg0, arg1)
}

// GetAllUsersDesc mocks base method.
func (m *MockStore) GetAllUsersDesc(arg0 context.Context, arg1 sqlc.GetAllUsersDescParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersDesc indicates an expected call of GetAllUsersDesc.
func (mr *MockStoreMockRecorder) GetAllUsersDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersDesc", reflect.TypeOf((*MockStore)(nil).GetAllUsersDesc), arg0, arg1)
}

// GetAllUsersOrderByIDAsc mocks base method.
func (m *MockStore) GetAllUsersOrderByIDAsc(arg0 context.Context, arg1 sqlc.GetAllUsersOrderByIDAscParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersOrderByIDAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersOrderByIDAsc indicates an expected call of GetAllUsersOrderByIDAsc.
func (mr *MockStoreMockRecorder) GetAllUsersOrderByIDAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersOrderByIDAsc", reflect.TypeOf((*MockStore)(nil).GetAllUsersOrderByIDAsc), arg0, arg1)
}

// GetAllUsersOrderByIDDesc mocks base method.
func (m *MockStore) GetAllUsersOrderByIDDesc(arg0 context.Context, arg1 sqlc.GetAllUsersOrderByIDDescParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersOrderByIDDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersOrderByIDDesc indicates an expected call of GetAllUsersOrderByIDDesc.
func (mr *MockStoreMockRecorder) GetAllUsersOrderByIDDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersOrderByIDDesc", reflect.TypeOf((*MockStore)(nil).GetAllUsersOrderByIDDesc), arg0, arg1)
}

// GetEntriesAsc mocks base method.
func (m *MockStore) GetEntriesAsc(arg0 context.Context, arg1 sqlc.GetEntriesAscParams) ([]sqlc.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntriesAsc indicates an expected call of GetEntriesAsc.
func (mr *MockStoreMockRecorder) GetEntriesAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesAsc", reflect.TypeOf((*MockStore)(nil).GetEntriesAsc), arg0, arg1)
}

// GetEntriesDesc mocks base method.
func (m *MockStore) GetEntriesDesc(arg0 context.Context, arg1 sqlc.GetEntriesDescParams) ([]sqlc.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntriesDesc indicates an expected call of GetEntriesDesc.
func (mr *MockStoreMockRecorder) GetEntriesDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesDesc", reflect.TypeOf((*MockStore)(nil).GetEntriesDesc), arg0, arg1)
}

// GetEntry mocks base method.
func (m *MockStore) GetEntry(arg0 context.Context, arg1 int64) (sqlc.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockStoreMockRecorder) GetEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockStore)(nil).GetEntry), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 pgtype.UUID) (sqlc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetTransfer mocks base method.
func (m *MockStore) GetTransfer(arg0 context.Context, arg1 int64) (sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfer", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfer indicates an expected call of GetTransfer.
func (mr *MockStoreMockRecorder) GetTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfer", reflect.TypeOf((*MockStore)(nil).GetTransfer), arg0, arg1)
}

// GetTransfersAmountBetweenAsc mocks base method.
func (m *MockStore) GetTransfersAmountBetweenAsc(arg0 context.Context, arg1 sqlc.GetTransfersAmountBetweenAscParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountBetweenAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountBetweenAsc indicates an expected call of GetTransfersAmountBetweenAsc.
func (mr *MockStoreMockRecorder) GetTransfersAmountBetweenAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountBetweenAsc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountBetweenAsc), arg0, arg1)
}

// GetTransfersAmountBetweenDesc mocks base method.
func (m *MockStore) GetTransfersAmountBetweenDesc(arg0 context.Context, arg1 sqlc.GetTransfersAmountBetweenDescParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountBetweenDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountBetweenDesc indicates an expected call of GetTransfersAmountBetweenDesc.
func (mr *MockStoreMockRecorder) GetTransfersAmountBetweenDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountBetweenDesc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountBetweenDesc), arg0, arg1)
}

// GetTransfersAmountEQAsc mocks base method.
func (m *MockStore) GetTransfersAmountEQAsc(arg0 context.Context, arg1 sqlc.GetTransfersAmountEQAscParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountEQAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountEQAsc indicates an expected call of GetTransfersAmountEQAsc.
func (mr *MockStoreMockRecorder) GetTransfersAmountEQAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountEQAsc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountEQAsc), arg0, arg1)
}

// GetTransfersAmountEQDesc mocks base method.
func (m *MockStore) GetTransfersAmountEQDesc(arg0 context.Context, arg1 sqlc.GetTransfersAmountEQDescParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountEQDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountEQDesc indicates an expected call of GetTransfersAmountEQDesc.
func (mr *MockStoreMockRecorder) GetTransfersAmountEQDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountEQDesc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountEQDesc), arg0, arg1)
}

// GetTransfersAmountGTAsc mocks base method.
func (m *MockStore) GetTransfersAmountGTAsc(arg0 context.Context, arg1 sqlc.GetTransfersAmountGTAscParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountGTAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountGTAsc indicates an expected call of GetTransfersAmountGTAsc.
func (mr *MockStoreMockRecorder) GetTransfersAmountGTAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountGTAsc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountGTAsc), arg0, arg1)
}

// GetTransfersAmountGTDesc mocks base method.
func (m *MockStore) GetTransfersAmountGTDesc(arg0 context.Context, arg1 sqlc.GetTransfersAmountGTDescParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountGTDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountGTDesc indicates an expected call of GetTransfersAmountGTDesc.
func (mr *MockStoreMockRecorder) GetTransfersAmountGTDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountGTDesc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountGTDesc), arg0, arg1)
}

// GetTransfersAmountGTEQAsc mocks base method.
func (m *MockStore) GetTransfersAmountGTEQAsc(arg0 context.Context, arg1 sqlc.GetTransfersAmountGTEQAscParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountGTEQAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountGTEQAsc indicates an expected call of GetTransfersAmountGTEQAsc.
func (mr *MockStoreMockRecorder) GetTransfersAmountGTEQAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountGTEQAsc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountGTEQAsc), arg0, arg1)
}

// GetTransfersAmountGTEQDesc mocks base method.
func (m *MockStore) GetTransfersAmountGTEQDesc(arg0 context.Context, arg1 sqlc.GetTransfersAmountGTEQDescParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountGTEQDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountGTEQDesc indicates an expected call of GetTransfersAmountGTEQDesc.
func (mr *MockStoreMockRecorder) GetTransfersAmountGTEQDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountGTEQDesc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountGTEQDesc), arg0, arg1)
}

// GetTransfersAmountLTAsc mocks base method.
func (m *MockStore) GetTransfersAmountLTAsc(arg0 context.Context, arg1 sqlc.GetTransfersAmountLTAscParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountLTAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountLTAsc indicates an expected call of GetTransfersAmountLTAsc.
func (mr *MockStoreMockRecorder) GetTransfersAmountLTAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountLTAsc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountLTAsc), arg0, arg1)
}

// GetTransfersAmountLTDesc mocks base method.
func (m *MockStore) GetTransfersAmountLTDesc(arg0 context.Context, arg1 sqlc.GetTransfersAmountLTDescParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountLTDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountLTDesc indicates an expected call of GetTransfersAmountLTDesc.
func (mr *MockStoreMockRecorder) GetTransfersAmountLTDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountLTDesc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountLTDesc), arg0, arg1)
}

// GetTransfersAmountLTEQAsc mocks base method.
func (m *MockStore) GetTransfersAmountLTEQAsc(arg0 context.Context, arg1 sqlc.GetTransfersAmountLTEQAscParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountLTEQAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountLTEQAsc indicates an expected call of GetTransfersAmountLTEQAsc.
func (mr *MockStoreMockRecorder) GetTransfersAmountLTEQAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountLTEQAsc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountLTEQAsc), arg0, arg1)
}

// GetTransfersAmountLTEQDesc mocks base method.
func (m *MockStore) GetTransfersAmountLTEQDesc(arg0 context.Context, arg1 sqlc.GetTransfersAmountLTEQDescParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountLTEQDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountLTEQDesc indicates an expected call of GetTransfersAmountLTEQDesc.
func (mr *MockStoreMockRecorder) GetTransfersAmountLTEQDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountLTEQDesc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountLTEQDesc), arg0, arg1)
}

// GetTransfersAmountNOTEQAsc mocks base method.
func (m *MockStore) GetTransfersAmountNOTEQAsc(arg0 context.Context, arg1 sqlc.GetTransfersAmountNOTEQAscParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountNOTEQAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountNOTEQAsc indicates an expected call of GetTransfersAmountNOTEQAsc.
func (mr *MockStoreMockRecorder) GetTransfersAmountNOTEQAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountNOTEQAsc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountNOTEQAsc), arg0, arg1)
}

// GetTransfersAmountNOTEQDesc mocks base method.
func (m *MockStore) GetTransfersAmountNOTEQDesc(arg0 context.Context, arg1 sqlc.GetTransfersAmountNOTEQDescParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAmountNOTEQDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAmountNOTEQDesc indicates an expected call of GetTransfersAmountNOTEQDesc.
func (mr *MockStoreMockRecorder) GetTransfersAmountNOTEQDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAmountNOTEQDesc", reflect.TypeOf((*MockStore)(nil).GetTransfersAmountNOTEQDesc), arg0, arg1)
}

// GetTransfersAsc mocks base method.
func (m *MockStore) GetTransfersAsc(arg0 context.Context, arg1 sqlc.GetTransfersAscParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersAsc indicates an expected call of GetTransfersAsc.
func (mr *MockStoreMockRecorder) GetTransfersAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersAsc", reflect.TypeOf((*MockStore)(nil).GetTransfersAsc), arg0, arg1)
}

// GetTransfersDesc mocks base method.
func (m *MockStore) GetTransfersDesc(arg0 context.Context, arg1 sqlc.GetTransfersDescParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersDesc indicates an expected call of GetTransfersDesc.
func (mr *MockStoreMockRecorder) GetTransfersDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersDesc", reflect.TypeOf((*MockStore)(nil).GetTransfersDesc), arg0, arg1)
}

// GetTransfersFromAsc mocks base method.
func (m *MockStore) GetTransfersFromAsc(arg0 context.Context, arg1 sqlc.GetTransfersFromAscParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersFromAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersFromAsc indicates an expected call of GetTransfersFromAsc.
func (mr *MockStoreMockRecorder) GetTransfersFromAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersFromAsc", reflect.TypeOf((*MockStore)(nil).GetTransfersFromAsc), arg0, arg1)
}

// GetTransfersFromDesc mocks base method.
func (m *MockStore) GetTransfersFromDesc(arg0 context.Context, arg1 sqlc.GetTransfersFromDescParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersFromDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersFromDesc indicates an expected call of GetTransfersFromDesc.
func (mr *MockStoreMockRecorder) GetTransfersFromDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersFromDesc", reflect.TypeOf((*MockStore)(nil).GetTransfersFromDesc), arg0, arg1)
}

// GetTransfersToAsc mocks base method.
func (m *MockStore) GetTransfersToAsc(arg0 context.Context, arg1 sqlc.GetTransfersToAscParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersToAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersToAsc indicates an expected call of GetTransfersToAsc.
func (mr *MockStoreMockRecorder) GetTransfersToAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersToAsc", reflect.TypeOf((*MockStore)(nil).GetTransfersToAsc), arg0, arg1)
}

// GetTransfersToDesc mocks base method.
func (m *MockStore) GetTransfersToDesc(arg0 context.Context, arg1 sqlc.GetTransfersToDescParams) ([]sqlc.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfersToDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfersToDesc indicates an expected call of GetTransfersToDesc.
func (mr *MockStoreMockRecorder) GetTransfersToDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfersToDesc", reflect.TypeOf((*MockStore)(nil).GetTransfersToDesc), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 int64) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// GetUsersByAccStatusAsc mocks base method.
func (m *MockStore) GetUsersByAccStatusAsc(arg0 context.Context, arg1 sqlc.GetUsersByAccStatusAscParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByAccStatusAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByAccStatusAsc indicates an expected call of GetUsersByAccStatusAsc.
func (mr *MockStoreMockRecorder) GetUsersByAccStatusAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByAccStatusAsc", reflect.TypeOf((*MockStore)(nil).GetUsersByAccStatusAsc), arg0, arg1)
}

// GetUsersByAccStatusDesc mocks base method.
func (m *MockStore) GetUsersByAccStatusDesc(arg0 context.Context, arg1 sqlc.GetUsersByAccStatusDescParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByAccStatusDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByAccStatusDesc indicates an expected call of GetUsersByAccStatusDesc.
func (mr *MockStoreMockRecorder) GetUsersByAccStatusDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByAccStatusDesc", reflect.TypeOf((*MockStore)(nil).GetUsersByAccStatusDesc), arg0, arg1)
}

// GetUsersByCustRankAsc mocks base method.
func (m *MockStore) GetUsersByCustRankAsc(arg0 context.Context, arg1 sqlc.GetUsersByCustRankAscParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByCustRankAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByCustRankAsc indicates an expected call of GetUsersByCustRankAsc.
func (mr *MockStoreMockRecorder) GetUsersByCustRankAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByCustRankAsc", reflect.TypeOf((*MockStore)(nil).GetUsersByCustRankAsc), arg0, arg1)
}

// GetUsersByCustRankDesc mocks base method.
func (m *MockStore) GetUsersByCustRankDesc(arg0 context.Context, arg1 sqlc.GetUsersByCustRankDescParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByCustRankDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByCustRankDesc indicates an expected call of GetUsersByCustRankDesc.
func (mr *MockStoreMockRecorder) GetUsersByCustRankDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByCustRankDesc", reflect.TypeOf((*MockStore)(nil).GetUsersByCustRankDesc), arg0, arg1)
}

// GetUsersByPatternAndAccStatusAsc mocks base method.
func (m *MockStore) GetUsersByPatternAndAccStatusAsc(arg0 context.Context, arg1 sqlc.GetUsersByPatternAndAccStatusAscParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByPatternAndAccStatusAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByPatternAndAccStatusAsc indicates an expected call of GetUsersByPatternAndAccStatusAsc.
func (mr *MockStoreMockRecorder) GetUsersByPatternAndAccStatusAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByPatternAndAccStatusAsc", reflect.TypeOf((*MockStore)(nil).GetUsersByPatternAndAccStatusAsc), arg0, arg1)
}

// GetUsersByPatternAndAccStatusDesc mocks base method.
func (m *MockStore) GetUsersByPatternAndAccStatusDesc(arg0 context.Context, arg1 sqlc.GetUsersByPatternAndAccStatusDescParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByPatternAndAccStatusDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByPatternAndAccStatusDesc indicates an expected call of GetUsersByPatternAndAccStatusDesc.
func (mr *MockStoreMockRecorder) GetUsersByPatternAndAccStatusDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByPatternAndAccStatusDesc", reflect.TypeOf((*MockStore)(nil).GetUsersByPatternAndAccStatusDesc), arg0, arg1)
}

// GetUsersByPatternAsc mocks base method.
func (m *MockStore) GetUsersByPatternAsc(arg0 context.Context, arg1 sqlc.GetUsersByPatternAscParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByPatternAsc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByPatternAsc indicates an expected call of GetUsersByPatternAsc.
func (mr *MockStoreMockRecorder) GetUsersByPatternAsc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByPatternAsc", reflect.TypeOf((*MockStore)(nil).GetUsersByPatternAsc), arg0, arg1)
}

// GetUsersByPatternDesc mocks base method.
func (m *MockStore) GetUsersByPatternDesc(arg0 context.Context, arg1 sqlc.GetUsersByPatternDescParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByPatternDesc", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByPatternDesc indicates an expected call of GetUsersByPatternDesc.
func (mr *MockStoreMockRecorder) GetUsersByPatternDesc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByPatternDesc", reflect.TypeOf((*MockStore)(nil).GetUsersByPatternDesc), arg0, arg1)
}

// SetAccountBalance mocks base method.
func (m *MockStore) SetAccountBalance(arg0 context.Context, arg1 sqlc.SetAccountBalanceParams) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAccountBalance indicates an expected call of SetAccountBalance.
func (mr *MockStoreMockRecorder) SetAccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountBalance", reflect.TypeOf((*MockStore)(nil).SetAccountBalance), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 db.TransferTxParams) (db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// UpdateAccountAccStatus mocks base method.
func (m *MockStore) UpdateAccountAccStatus(arg0 context.Context, arg1 sqlc.UpdateAccountAccStatusParams) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountAccStatus", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountAccStatus indicates an expected call of UpdateAccountAccStatus.
func (mr *MockStoreMockRecorder) UpdateAccountAccStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountAccStatus", reflect.TypeOf((*MockStore)(nil).UpdateAccountAccStatus), arg0, arg1)
}

// UpdateAccountBalance mocks base method.
func (m *MockStore) UpdateAccountBalance(arg0 context.Context, arg1 sqlc.UpdateAccountBalanceParams) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountBalance indicates an expected call of UpdateAccountBalance.
func (mr *MockStoreMockRecorder) UpdateAccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalance", reflect.TypeOf((*MockStore)(nil).UpdateAccountBalance), arg0, arg1)
}

// UpdateAccountType mocks base method.
func (m *MockStore) UpdateAccountType(arg0 context.Context, arg1 sqlc.UpdateAccountTypeParams) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountType", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountType indicates an expected call of UpdateAccountType.
func (mr *MockStoreMockRecorder) UpdateAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountType", reflect.TypeOf((*MockStore)(nil).UpdateAccountType), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 sqlc.UpdateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockStore) UpdateVerifyEmail(arg0 context.Context, arg1 sqlc.UpdateVerifyEmailParams) (sqlc.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(sqlc.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockStoreMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockStore)(nil).UpdateVerifyEmail), arg0, arg1)
}

// UpdateVerifyPhone mocks base method.
func (m *MockStore) UpdateVerifyPhone(arg0 context.Context, arg1 sqlc.UpdateVerifyPhoneParams) (sqlc.VerifyPhone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyPhone", arg0, arg1)
	ret0, _ := ret[0].(sqlc.VerifyPhone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyPhone indicates an expected call of UpdateVerifyPhone.
func (mr *MockStoreMockRecorder) UpdateVerifyPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyPhone", reflect.TypeOf((*MockStore)(nil).UpdateVerifyPhone), arg0, arg1)
}
